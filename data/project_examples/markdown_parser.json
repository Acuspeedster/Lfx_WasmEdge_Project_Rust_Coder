{
  "query": "How to build a markdown parser in Rust",
  "example": "A Rust implementation of a basic markdown parser that handles headers, bold, italic, and links",
  "project_files": {
    "Cargo.toml": "[package]\nname = \"rust-markdown-parser\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nregex = \"1.5\"",
    "src/main.rs": "use std::fs;\nuse regex::Regex;\n\nstruct MarkdownParser {\n    input: String,\n}\n\nimpl MarkdownParser {\n    fn new(input: String) -> Self {\n        MarkdownParser { input }\n    }\n\n    fn parse_headers(&self) -> String {\n        let header_regex = Regex::new(r\"^(#{1,6})\\s+(.+)$\").unwrap();\n        let mut output = self.input.clone();\n\n        for line in self.input.lines() {\n            if let Some(captures) = header_regex.captures(line) {\n                let level = captures.get(1).unwrap().as_str().len();\n                let text = captures.get(2).unwrap().as_str();\n                let html_header = format!(\"<h{}>{}</h{}>\", level, text, level);\n                output = output.replace(line, &html_header);\n            }\n        }\n        output\n    }\n\n    fn parse_bold_italic(&self, html: String) -> String {\n        let bold_regex = Regex::new(r\"\\*\\*(.*?)\\*\\*\").unwrap();\n        let italic_regex = Regex::new(r\"\\*(.*?)\\*\").unwrap();\n\n        let bold_html = bold_regex.replace_all(&html, \"<strong>$1</strong>\");\n        let italic_html = italic_regex.replace_all(&bold_html, \"<em>$1</em>\");\n        \n        italic_html.into()\n    }\n\n    fn parse_links(&self, html: String) -> String {\n        let link_regex = Regex::new(r\"\\[([^\\]]+)\\]\\(([^\\)]+)\\)\").unwrap();\n        link_regex.replace_all(&html, \"<a href=\\\"$2\\\">$1</a>\").into()\n    }\n\n    fn parse(&self) -> String {\n        let headers_html = self.parse_headers();\n        let formatted_html = self.parse_bold_italic(headers_html);\n        let final_html = self.parse_links(formatted_html);\n        final_html\n    }\n}\n\nfn main() {\n    let markdown = fs::read_to_string(\"input.md\").expect(\"Could not read file\");\n    let parser = MarkdownParser::new(markdown);\n    let html = parser.parse();\n    fs::write(\"output.html\", html).expect(\"Could not write file\");\n}"
  }
}